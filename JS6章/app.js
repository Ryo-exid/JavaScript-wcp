// // // // // // // 6章 【イベントを検出しよう】

// // // // // // // 「クリックする」「マウスを移動する」などのように、ブラウザ上でユーザが実行する動作のことを「イベント」といいます。
// // // // // // 本章では、jQueryでイベントを検出し、イベントに応じてCSSを変更する方法を学習しましょう。



// // // // // 「マウスオーバー」イベント

// // // // // HTML要素上にマウスカーソルが重なっている状態を「マウスオーバー（mouseover）」といいます。

// // // // $(function(){
// // // //   $('.box1').mouseover(function(){
// // // //     $('.box1').css({'background-color': '#0000FF'});
// // // //   });
// // // // });


// // // // // $('.セレクタ名').イベント名(function(){
// // // // //   イベント発生時に行われる処理
// // // // // });



// // // // 「マウスアウト」イベントを追加する

// // // // HTML要素からマウスカーソルが外れることを「マウスアウト（mouseout）」といいます。


// // // $(function(){
// // //   $('.box1').mouseover(function(){
// // //     $('.box1').css({'background-color': '#0000FF'});
// // //   });
// // //   $('.box1').mouseout(function(){
// // //     $('.box1').css({'background-color': '#FF0000'});
// // //   });
// // // });

// // // // マウスカーソルがbox1に入ると青色、出ると赤色に変化するようになりました。



// // // [class属性を追加する／解除する]

// // // この記述ですと、すべてのCSSをいちいち書かねばならず、手間がかかってしまいます。

// // // そこで、マウスオーバー時のCSS（class）をあらかじめ定義しておき、マウスカーソルの状況に応じて、そのCSSを追加（または解除）するように設定してみましょう。


// // $(function(){
// //   $('.box1').mouseover(function(){
// //     $('.box1').addClass('box1-ext');
// //   });
// //   $('.box1').mouseout(function(){
// //     $('.box1').removeClass('box1-ext');
// //   });
// // });


// // // class属性の切り替えに使われているのが、addClass( )とremoveClass( )です。
// // // addClass( )では、対象のHTML要素にclass属性を追加します。
// // // removeClass( )では、要素に設定されているclass属性が解除されます。



// // 「マウスクリック」イベントを設定する

// 今回は、クリック後に複数のイベントが行われるようにしたいので、onを付けた以下のような書き方をします。

// 【マウスクリックイベントの記述】

// $('.セレクタ名').on('click', function() {
//   イベント発生時に行われる処理
// });


$(function(){
  $('.box1').on('click', function(){
    $('.box1').addClass('box1-ext');
  });
  $('.box1').mouseout(function(){
    $('.box1').removeClass('box1-ext');
  });
});


// box1をクリックすると太い黒枠が表示され、マウスアウトすると赤色のみになる動作を確認できたでしょうか。
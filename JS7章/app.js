// // // 7章 【thisとchildren】

// // // 「this」は、イベントが発生した要素のみを変化させます。
// // // 「children」は、HTML要素直下のすべての子要素を取得します。



// // // 正方形をクリックしたときに、その正方形のみslideUpして消えるアニメーションです。
// // $(function(){
// //   $('.bg1').on('click', function(){
// //     $('.bg1').slideUp();
// //   });

// //   $('.bg2').on('click', function(){
// //     $('.bg2').slideUp();
// //   });

// //   $('.bg3').on('click', function(){
// //     $('.bg3').slideUp();
// //   });

// //   $('.bg4').on('click', function(){
// //     $('.bg4').slideUp();
// //   });
// // });


// 「this」
// // // thisを利用すると、コードをシンプルにまとめることができます。



// $(function(){
//   $('.box1').on('click', function(){
//     $(this).slideUp();
//   });
// });


// // 「box1クラスの正方形がクリックされたとき、this（クリックされた要素）のみslideUpさせる」という設定になります。

// thisを使うと、このように多くの処理をまとめて書くことができて、とても便利です。
// ただし、コード上からでは、何をクリックしたときに動作するのか判別しにくいデメリットもあります。

// thisを使うメリットとデメリットをよく理解したうえで、利用するようにしましょう。





//　※thisで使ったapp.cssは一旦全てコメントアウトし、HTMLを変更している程。
// 「children」


$(function(){
  $('button').on('click', function(){
    $('ul').children().css('color','red');
  });
});


// 「クリック」ボタンをクリックしてみてください。
// リスト（ul要素）の子要素であるli要素内の文字列が、黒色から赤色に変化することを確認できます。

